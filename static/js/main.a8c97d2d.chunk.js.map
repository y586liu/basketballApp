{"version":3,"sources":["component/TeamsForm.js","App.js","index.js"],"names":["TeamsForm","league","useState","seasons","season","setSeason","temprows","page","setPage","rows","setRows","getTeamStats","myteams","i","a","teamUrl","id","fetch","method","headers","response","json","res","team","name","wins","games","all","total","draws","loses","length","OnSeasonChange","index","useEffect","teamsUrl","map","e","className","onClick","RenderSeasonButtons","country","start","end","TableContainer","component","Paper","Table","TableHead","TableRow","TableCell","align","TableBody","slice","row","TablePagination","rowsPerPageOptions","count","rowsPerPage","onChangePage","event","newPage","App","countries","setCountries","leagues","setLeagues","allleagues","setAlleagues","selectedLeague","setSelectedLeague","onLeagueChange","value","Autocomplete","options","getOptionLabel","option","style","width","padding","renderInput","params","TextField","label","variant","onChange","leagueUrl","toLowerCase","then","data","catch","err","console","error","Object","keys","ReactDOM","render","document","getElementById"],"mappings":"2XAoLeA,MAzKf,YAAgC,IAAXC,EAAU,EAAVA,OACnB,EAA4BC,mBAASD,EAAOE,QAAQ,IAApD,mBAAOC,EAAP,KAAeC,EAAf,KAEIC,EAAW,GAGf,EAAwBJ,mBAAS,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACA,EAAwBN,mBAAS,IAAjC,mBAAOO,EAAP,KAAaC,EAAb,KAiBA,SAASC,EAAaC,GACpB,IAD8B,IAAD,WACpBC,GACP,sBAAC,gCAAAC,EAAA,6DACKC,EACF,2DACAX,EAAOA,OACP,WACAH,EAAOe,GACP,SACAJ,EAAQC,GAPX,SAQwBI,MAAMF,EAAS,CACpCG,OAAQ,MACRC,QAAS,CACP,iBACE,qDACF,kBAAmB,mCAbxB,cAQOC,EARP,gBAgBmBA,EAASC,OAhB5B,OAgBOC,EAhBP,OAiBChB,EAAQ,sBAAOA,GAAP,EA7BMiB,EA6BsBD,EAAIF,SAxBrC,CAAEI,KAJED,EAAKA,KAAKC,KAINC,KAHJF,EAAKG,MAAMD,KAAKE,IAAIC,MAGVC,MAFTN,EAAKG,MAAMG,MAAMF,IAAIC,MAELE,MADhBP,EAAKG,MAAMI,MAAMH,IAAIC,UA0BzBf,IAAMD,EAAQmB,OAAS,GACzBrB,EAAQJ,GAnBX,iCAZL,IAAoBiB,IAYf,MAAD,IADOV,EAAI,EAAGA,EAAID,EAAQmB,OAAQlB,IAAM,EAAjCA,GA0BX,SAASmB,EAAeC,GACtB5B,EAAUJ,EAAOE,QAAQ8B,IA0E3B,OAtEAC,qBAAU,WACR7B,EAAUJ,EAAOE,QAAQ,MACxB,CAACF,IAGJiC,qBAAU,WACR,sBAAC,gCAAApB,EAAA,6DACKqB,EACF,sDACAlC,EAAOe,GACP,WACAZ,EAAOA,OALV,SAMwBa,MAAMkB,EAAU,CACrCjB,OAAQ,MACRC,QAAS,CACP,iBACE,qDACF,kBAAmB,mCAXxB,cAMOC,EANP,gBAcmBA,EAASC,OAd5B,OAcOC,EAdP,OAgBCX,EADK,YAAOW,EAAIF,SAASgB,KAAI,SAACC,GAAD,OAAOA,EAAErB,QAfvC,0CAAD,KAkBC,CAACf,EAAQG,IA+CV,sBAAKkC,UAAU,OAAf,UACE,sDA9CJ,WACE,OAAQrC,EAAOE,QAAQ4B,QACrB,KAAK,EACH,OACE,8BACE,yBAAQQ,QAAS,kBAAMP,EAAe,IAAtC,UACG,IACA/B,EAAOE,QAAQ,GAAGC,OAAQ,SAInC,KAAK,EACH,OACE,gCACE,yBAAQmC,QAAS,kBAAMP,EAAe,IAAtC,UACG,IACA/B,EAAOE,QAAQ,GAAGC,OAAQ,OAE7B,yBAAQmC,QAAS,kBAAMP,EAAe,IAAtC,UACG,IACA/B,EAAOE,QAAQ,GAAGC,OAAQ,UAInC,QACE,OACE,gCACE,yBAAQmC,QAAS,kBAAMP,EAAe,IAAtC,UACG,IACA/B,EAAOE,QAAQ,GAAGC,OAAQ,OAE7B,yBAAQmC,QAAS,kBAAMP,EAAe,IAAtC,UACG,IACA/B,EAAOE,QAAQ,GAAGC,OAAQ,OAE7B,yBAAQmC,QAAS,kBAAMP,EAAe,IAAtC,UACG,IACA/B,EAAOE,QAAQ,GAAGC,OAAQ,WAUlCoC,GACD,2CAAcvC,EAAOwC,QAAQjB,QAC7B,0CAAavB,EAAOuB,QACpB,0CAAapB,EAAOA,OAApB,UAAmCA,EAAOsC,MAA1C,OAAqDtC,EAAOuC,IAA5D,OACA,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,mBACA,cAACA,EAAA,EAAD,CAAWC,MAAM,QAAjB,kBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,mBACA,cAACD,EAAA,EAAD,CAAWC,MAAM,QAAjB,wBAGJ,cAACC,EAAA,EAAD,UACG3C,EACE4C,MAzIO,GAyID9C,EAzIC,GAyImBA,EAzInB,IA0IP6B,KAAI,SAACkB,GAAD,OACH,eAACL,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UAAYI,EAAI9B,OAChB,cAAC0B,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0BG,EAAI7B,OAC9B,cAACyB,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0BG,EAAIxB,QAC9B,cAACoB,EAAA,EAAD,CAAWC,MAAM,QAAjB,SAA0BG,EAAIzB,UAJjByB,EAAI9B,gBAU7B,cAAC+B,EAAA,EAAD,CACEC,mBAAoB,GACpBX,UAAU,MACVY,MAAOhD,EAAKsB,OACZ2B,YAzJc,GA0JdnD,KAAMA,EACNoD,aAzJmB,SAACC,EAAOC,GAC/BrD,EAAQqD,UCqHGC,MArIf,WACE,MAAkC5D,mBAAS,IAA3C,mBAAO6D,EAAP,KAAkBC,EAAlB,KACA,EAA8B9D,mBAAS,IAAvC,mBAAO+D,EAAP,KAAgBC,EAAhB,KACA,EAAmChE,mBAAS,IAA5C,mBAAOiE,EAAP,KAAmBC,EAAnB,KAEA,EAA4ClE,mBAAS,IAArD,mBAAOmE,EAAP,KAAuBC,EAAvB,KAsBA,SAASC,EAAeX,EAAOY,GAC7BF,EAAkBE,GAmDpB,OApCAtC,qBAAU,WACR,sBAAC,8BAAApB,EAAA,sEACwBG,MACrB,kDACA,CACEC,OAAQ,MACRC,QAAS,CACP,iBACE,qDACF,kBAAmB,mCAR1B,cACOC,EADP,gBAYmBA,EAASC,OAZ5B,OAYOC,EAZP,OAaC0C,EAAa1C,EAAIF,UAblB,0CAAD,KAeC,IAEHc,qBAAU,WACR,sBAAC,8BAAApB,EAAA,sEACwBG,MACrB,gDACA,CACEC,OAAQ,MACRC,QAAS,CACP,iBACE,qDACF,kBAAmB,mCAR1B,cACOC,EADP,gBAYmBA,EAASC,OAZ5B,OAYOC,EAZP,OAaC8C,EAAa9C,EAAIF,UAblB,0CAAD,KAeC,IAGD,sBAAKJ,GAAG,MAAR,UACE,sBAAKA,GAAG,YAAYsB,UAAU,UAA9B,UACE,6DACA,yCAEE,0BAEF,cAACmC,EAAA,EAAD,CACEzD,GAAG,gBACH0D,QAASX,EACTY,eAAgB,SAACC,GAAD,OAAYA,EAAOpD,MACnCqD,MAAO,CAAEC,MAAO,IAAKC,QAAS,IAC9BC,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BACMD,GADN,IAEEE,MAAM,mBACNC,QAAQ,eAGZC,SA5FR,SAAyBzB,EAAOY,GAC9B,IAAIc,EACF,yDACAd,EAAMhD,KAAK+D,cACbtE,MAAMqE,EAAW,CACfpE,OAAQ,MACRC,QAAS,CACP,iBAAkB,qDAClB,kBAAmB,mCAGpBqE,MAAK,SAACpE,GAAD,OAAcA,EAASC,UAC5BmE,MAAK,SAACC,GACLvB,EAAWuB,EAAKrE,aAEjBsE,OAAM,SAACC,GACNC,QAAQC,MAAMF,SA8Ed,wCAEE,0BAEF,cAAClB,EAAA,EAAD,CACEzD,GAAG,eACH0D,QAAST,EACTU,eAAgB,SAACC,GAAD,OAAYA,EAAOpD,MACnCqD,MAAO,CAAEC,MAAO,IAAKC,QAAS,IAC9BC,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBE,MAAM,kBAAkBC,QAAQ,eAEzDC,SAAUd,IAEZ,2DACA,uDACA,cAACE,EAAA,EAAD,CACEzD,GAAG,eACH0D,QAASP,EACTQ,eAAgB,SAACC,GAAD,OAAYA,EAAOpD,KAAO,MAAQoD,EAAOnC,QAAQjB,MACjEqD,MAAO,CAAEC,MAAO,IAAKC,QAAS,IAC9BC,YAAa,SAACC,GAAD,OACX,cAACC,EAAA,EAAD,2BAAeD,GAAf,IAAuBE,MAAM,kBAAkBC,QAAQ,eAEzDC,SAAUd,OA7FZF,GAAyD,IAAvCyB,OAAOC,KAAK1B,GAAgBtC,OACV,IAAlCsC,EAAelE,QAAQ4B,OAClB,oEAEA,cAAC,EAAD,CAAW9B,OAAQoE,IAGrB,iFCvCb2B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a8c97d2d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport \"./TeamsForm.css\";\r\n\r\nfunction TeamsForm({ league }) {\r\n  const [season, setSeason] = useState(league.seasons[0]);\r\n\r\n  let temprows = [];\r\n  let teams = [];\r\n\r\n  const [page, setPage] = useState(0);\r\n  const [rows, setRows] = useState([]);\r\n  const rowsPerPage = 10;\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  function createData(team) {\r\n    let name = team.team.name;\r\n    let wins = team.games.wins.all.total;\r\n    let draws = team.games.draws.all.total;\r\n    let loses = team.games.loses.all.total;\r\n    return { name, wins, draws, loses };\r\n  }\r\n\r\n  //loop through all team ids:\r\n  //search team stats with {league} {season} {teamid}, save {teamname, wins, losses, draws} as a row\r\n  function getTeamStats(myteams) {\r\n    for (let i = 0; i < myteams.length; i++) {\r\n      (async () => {\r\n        let teamUrl =\r\n          \"https://api-basketball.p.rapidapi.com/statistics?season=\" +\r\n          season.season +\r\n          \"&league=\" +\r\n          league.id +\r\n          \"&team=\" +\r\n          myteams[i];\r\n        const response = await fetch(teamUrl, {\r\n          method: \"GET\",\r\n          headers: {\r\n            \"x-rapidapi-key\":\r\n              \"159c41a39fmsh809ec9a39138a2bp12d233jsne6898ee04471\",\r\n            \"x-rapidapi-host\": \"api-basketball.p.rapidapi.com\",\r\n          },\r\n        });\r\n        const res = await response.json();\r\n        temprows = [...temprows, createData(res.response)];\r\n        if (i === myteams.length - 1) {\r\n          setRows(temprows);\r\n        }\r\n      })();\r\n    }\r\n  }\r\n\r\n  function OnSeasonChange(index) {\r\n    setSeason(league.seasons[index]);\r\n  }\r\n\r\n  //whenever league changes, reset the season\r\n  useEffect(() => {\r\n    setSeason(league.seasons[0]);\r\n  }, [league]);\r\n\r\n  //search teams with {league} and {season}, get ids and save in array 'teams'\r\n  useEffect(() => {\r\n    (async () => {\r\n      let teamsUrl =\r\n        \"https://api-basketball.p.rapidapi.com/teams?league=\" +\r\n        league.id +\r\n        \"&season=\" +\r\n        season.season;\r\n      const response = await fetch(teamsUrl, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"x-rapidapi-key\":\r\n            \"159c41a39fmsh809ec9a39138a2bp12d233jsne6898ee04471\",\r\n          \"x-rapidapi-host\": \"api-basketball.p.rapidapi.com\",\r\n        },\r\n      });\r\n      const res = await response.json();\r\n      teams = [...res.response.map((e) => e.id)];\r\n      getTeamStats(teams);\r\n    })();\r\n  }, [league, season]);\r\n\r\n  function RenderSeasonButtons() {\r\n    switch (league.seasons.length) {\r\n      case 1:\r\n        return (\r\n          <div>\r\n            <button onClick={() => OnSeasonChange(0)}>\r\n              {\" \"}\r\n              {league.seasons[0].season}{\" \"}\r\n            </button>\r\n          </div>\r\n        );\r\n      case 2:\r\n        return (\r\n          <div>\r\n            <button onClick={() => OnSeasonChange(0)}>\r\n              {\" \"}\r\n              {league.seasons[0].season}{\" \"}\r\n            </button>\r\n            <button onClick={() => OnSeasonChange(1)}>\r\n              {\" \"}\r\n              {league.seasons[1].season}{\" \"}\r\n            </button>\r\n          </div>\r\n        );\r\n      default:\r\n        return (\r\n          <div>\r\n            <button onClick={() => OnSeasonChange(0)}>\r\n              {\" \"}\r\n              {league.seasons[0].season}{\" \"}\r\n            </button>\r\n            <button onClick={() => OnSeasonChange(1)}>\r\n              {\" \"}\r\n              {league.seasons[1].season}{\" \"}\r\n            </button>\r\n            <button onClick={() => OnSeasonChange(2)}>\r\n              {\" \"}\r\n              {league.seasons[2].season}{\" \"}\r\n            </button>\r\n          </div>\r\n        );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n      <h2>last three seasons: </h2>\r\n      {RenderSeasonButtons()}\r\n      <h2>Country: {league.country.name}</h2>\r\n      <h2>League: {league.name}</h2>\r\n      <h2>Season: {season.season} (from {season.start} to {season.end})</h2>\r\n      <TableContainer component={Paper}>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Team</TableCell>\r\n              <TableCell align=\"right\">Wins</TableCell>\r\n              <TableCell align=\"right\">Loses</TableCell>\r\n              <TableCell align=\"right\">Draws</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => (\r\n                <TableRow key={row.name}>\r\n                  <TableCell>{row.name}</TableCell>\r\n                  <TableCell align=\"right\">{row.wins}</TableCell>\r\n                  <TableCell align=\"right\">{row.loses}</TableCell>\r\n                  <TableCell align=\"right\">{row.draws}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TeamsForm;","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TeamsForm from \"./component/TeamsForm\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [leagues, setLeagues] = useState([]);\n  const [allleagues, setAlleagues] = useState([]);\n\n  const [selectedLeague, setSelectedLeague] = useState({});\n\n  function onCountryChange(event, value) {\n    let leagueUrl =\n      \"https://api-basketball.p.rapidapi.com/leagues?country=\" +\n      value.name.toLowerCase();\n    fetch(leagueUrl, {\n      method: \"GET\",\n      headers: {\n        \"x-rapidapi-key\": \"159c41a39fmsh809ec9a39138a2bp12d233jsne6898ee04471\",\n        \"x-rapidapi-host\": \"api-basketball.p.rapidapi.com\",\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        setLeagues(data.response);\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  }\n\n  function onLeagueChange(event, value) {\n    setSelectedLeague(value);\n  }\n\n  function renderTable() {\n    if (selectedLeague && Object.keys(selectedLeague).length !== 0) {\n      if (selectedLeague.seasons.length === 0) {\n        return <h2>There are 0 seasons of this league</h2>;\n      } else {\n        return <TeamsForm league={selectedLeague} />;\n      }\n    } else {\n      return <h2>Select a league in the left panel to start.</h2>\n    }\n  }\n\n  useEffect(() => {\n    (async () => {\n      const response = await fetch(\n        \"https://api-basketball.p.rapidapi.com/countries\",\n        {\n          method: \"GET\",\n          headers: {\n            \"x-rapidapi-key\":\n              \"159c41a39fmsh809ec9a39138a2bp12d233jsne6898ee04471\",\n            \"x-rapidapi-host\": \"api-basketball.p.rapidapi.com\",\n          },\n        }\n      );\n      const res = await response.json();\n      setCountries(res.response);\n    })();\n  }, []);\n\n  useEffect(() => {\n    (async () => {\n      const response = await fetch(\n        \"https://api-basketball.p.rapidapi.com/leagues\",\n        {\n          method: \"GET\",\n          headers: {\n            \"x-rapidapi-key\":\n              \"159c41a39fmsh809ec9a39138a2bp12d233jsne6898ee04471\",\n            \"x-rapidapi-host\": \"api-basketball.p.rapidapi.com\",\n          },\n        }\n      );\n      const res = await response.json();\n      setAlleagues(res.response);\n    })();\n  }, []);\n\n  return (\n    <div id=\"app\">\n      <div id=\"mySidebar\" className=\"sidebar\">\n        <h2>Select country, then league</h2>\n        <li>\n          Country\n          <br />\n        </li>\n        <Autocomplete\n          id=\"countrySelect\"\n          options={countries}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 200, padding: 30 }}\n          renderInput={(params) => (\n            <TextField\n              {...params}\n              label=\"Select a country\"\n              variant=\"outlined\"\n            />\n          )}\n          onChange={onCountryChange}\n        />\n        <li>\n          League\n          <br />\n        </li>\n        <Autocomplete\n          id=\"leagueSelect\"\n          options={leagues}\n          getOptionLabel={(option) => option.name}\n          style={{ width: 200, padding: 30 }}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Select a league\" variant=\"outlined\" />\n          )}\n          onChange={onLeagueChange}\n        />\n        <h2>Or select league directly</h2>\n        <li>Search in all leagues</li>\n        <Autocomplete\n          id=\"leagueSelect\"\n          options={allleagues}\n          getOptionLabel={(option) => option.name + \" - \" + option.country.name}\n          style={{ width: 200, padding: 30 }}\n          renderInput={(params) => (\n            <TextField {...params} label=\"Select a league\" variant=\"outlined\" />\n          )}\n          onChange={onLeagueChange}\n        />\n      </div>\n      {renderTable()}\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}